{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template to create EC2 resources for ECS deployment",
  "Mappings": {
    "AWSRegionToAMI" : {
      "us-east-1"      : { "AMIID" : "ami-2b3b6041" },
      "us-west-2"      : { "AMIID" : "ami-ac6872cd" },
      "eu-west-1"      : { "AMIID" : "ami-03238b70" },
      "ap-northeast-1" : { "AMIID" : "ami-fb2f1295" },
      "ap-southeast-2" : { "AMIID" : "ami-43547120" },
      "us-west-1"      : { "AMIID" : "ami-bfe095df" },
      "ap-southeast-1" : { "AMIID" : "ami-c78f43a4" },
      "eu-central-1"   : { "AMIID" : "ami-e1e6f88d" }
    }
  },
  "Parameters": {
    "EcsInstanceType": {
      "Type": "String",
      "Description": "ECS EC2 instance type.",
      "Default": "t2.nano",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.",
      "Default": ""
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC Id of existing VPC."
    },
    "SubnetIds": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "List of existing VPC Subnet Ids where ECS instances will run."
    },
    "VpcSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup::Id",
      "Description": "Security Group to attach to ECS instances."
    },
    "AsgMaxSize": {
      "Type": "Number",
      "Description": "Maximum size and initial Desired Capacity of ECS Auto Scaling Group.",
      "Default": "1"
    },
    "EcsPort": {
      "Type": "String",
      "Description": "Optional - Security Group port to open on ECS instances - defaults to port 80.",
      "Default": "80"
    },
    "SSLCertificateName": {
      "Type": "String",
      "Description": "Short name of the SSL Certificate you uploaded to IAM."
    },
    "ElbHealthCheckTarget": {
      "Type": "String",
      "Description": "Optional - Health Check Target for ELB - defaults to TCP:80.",
      "Default": "TCP:80"
    },
    "SourceCidr": {
      "Type": "String",
      "Description": "Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0.",
      "Default": "0.0.0.0/0"
    },
    "EcsClusterName": {
      "Type": "String",
      "Description": "Name of ECS Cluster."
    },
    "EcsEndpoint": {
      "Type": "String",
      "Description": "Optional : ECS Endpoint for the ECS Agent to connect to.",
      "Default": ""
    }
  },
  "Conditions": {
    "SetEndpointToECSAgent": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EcsEndpoint"
            },
            ""
          ]
        }
      ]
    },
    "CreateEC2LCWithKeyPair": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "KeyName"
            },
            ""
          ]
        }
      ]
    },
    "CreateEC2LCWithoutKeyPair": {
      "Fn::Equals": [
        {
          "Ref": "KeyName"
        },
        ""
      ]
    }
  },
  "Resources": {
    "ElbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ELB Allowed Ports",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": {
              "Ref": "SourceCidr"
            }
          }
        ]
      }
    },
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Allowed Ports",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "1",
            "ToPort": "65535",
            "SourceSecurityGroupId": {
              "Ref": "ElbSecurityGroup"
            }
          }
        ]
      }
    },
    "EcsElasticLoadBalancerExistingVpc": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "ElbSecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "SubnetIds"
        },
        "CrossZone": "true",
        "Listeners": [
          {
            "LoadBalancerPort": "443",
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "Protocol": "HTTPS",
            "SSLCertificateId": {
              "Fn::Join" : [
                "",
                [ "arn:aws:iam::",
                  {"Ref":"AWS::AccountId"},
                  ":server-certificate/",
                  { "Ref" : "SSLCertificateName" }
                ]
              ]
            },
            "PolicyNames" : ["MySSLNegotiationPolicy"]
          }
        ],
        "HealthCheck": {
          "Target": {
            "Ref": "ElbHealthCheckTarget"
          },
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "10",
          "Interval": "30",
          "Timeout": "5"
        },
        "Policies" : [
          {
            "PolicyName" : "MySSLNegotiationPolicy",
            "PolicyType" : "SSLNegotiationPolicyType",
            "Attributes" : [
              { "Name" : "Protocol-TLSv1", "Value" : "true" },
              { "Name" : "Protocol-SSLv2", "Value" : "true" },
              { "Name" : "Protocol-SSLv3", "Value" : "true" },
              { "Name" : "DHE-RSA-AES256-SHA", "Value" : "true" }
            ]
          }
        ]
      }
    },
    "EcsInstanceLc": {
      "Condition": "CreateEC2LCWithKeyPair",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": { "Fn::FindInMap" : [ "AWSRegionToAMI", { "Ref" : "AWS::Region" }, "AMIID" ] },
        "InstanceType": {
          "Ref": "EcsInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          { "Ref": "EcsSecurityGroup" },
          { "Ref": "VpcSecurityGroup" }
        ],
        "UserData": {
          "Fn::If": [
            "SetEndpointToECSAgent",
            {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo ECS_CLUSTER=",
                    {
                      "Ref": "EcsClusterName"
                    },
                    " >> /etc/ecs/ecs.config",
                    "\necho ECS_BACKEND_HOST=",
                    {
                      "Ref": "EcsEndpoint"
                    },
                    " >> /etc/ecs/ecs.config"
                  ]
                ]
              }
            },
            {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo ECS_CLUSTER=",
                    {
                      "Ref": "EcsClusterName"
                    },
                    " >> /etc/ecs/ecs.config"
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "EcsInstanceLcWithoutKeyPair": {
      "Condition": "CreateEC2LCWithoutKeyPair",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap" : [ "AWSRegionToAMI", { "Ref" : "AWS::Region" }, "AMIID" ] },
        "InstanceType": {
          "Ref": "EcsInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::If": [
            "SetEndpointToECSAgent",
            {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo ECS_CLUSTER=",
                    {
                      "Ref": "EcsClusterName"
                    },
                    " >> /etc/ecs/ecs.config",
                    "\necho ECS_BACKEND_HOST=",
                    {
                      "Ref": "EcsEndpoint"
                    },
                    " >> /etc/ecs/ecs.config"
                  ]
                ]
              }
            },
            {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "echo ECS_CLUSTER=",
                    {
                      "Ref": "EcsClusterName"
                    },
                    " >> /etc/ecs/ecs.config"
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "EcsInstanceAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Ref": "SubnetIds"
        },
        "LaunchConfigurationName": {
          "Fn::If": [
            "CreateEC2LCWithKeyPair",
            {
              "Ref": "EcsInstanceLc"
            },
            {
              "Ref": "EcsInstanceLcWithoutKeyPair"
            }
          ]
        },
        "MinSize": "1",
        "MaxSize": {
          "Ref": "AsgMaxSize"
        },
        "DesiredCapacity": {
          "Ref": "AsgMaxSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "ECS Instance - ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecs:Poll"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2Role"
          }
        ]
      }
    },
    "EcsServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "EcsServiceRoleName": {
      "Description": "IAM Role for ECS Service",
      "Value": {
        "Ref": "EcsServiceRole"
      }
    },
    "EcsInstanceAsgName": {
      "Description": "Auto Scaling Group Name for ECS Instances",
      "Value": {
        "Ref": "EcsInstanceAsg"
      }
    },
    "EcsElbName": {
      "Description": "Load Balancer for ECS Service",
      "Value": {
        "Ref": "EcsElasticLoadBalancerExistingVpc"
      }
    }
  },
  "Metadata": {
  }
}
